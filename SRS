**Tim's trying something**
Software Requirements Specification
for
Project Knowledge
Version 1.0 approved
Prepared by Timothy Durkee
PABT, Inc
02/26/2017
 
Table of Contents
Table of Contents	ii
Revision History	ii
1.	Introduction	1
1.1	Purpose	1
1.2	References	1
2.	Overall Description	1
2.1	User Classes and Characteristics	1
2.2	Operating Environment	1
2.3	Design and Implementation Constraints	2
2.4	Assumptions and Dependencies	2
3.	External Interface Requirements	2
3.1	User Interfaces	2
3.2	Hardware Interfaces	3
3.3	Software Interfaces	3
3.4	Communications Interfaces	3
4.	System Use Cases	3
4.1	Use case name and identifier	4
4.2	Making Schedule with a Tutor (U5)	4
4.3	Deposit money into ATM  (U3)	5
5.	Other Nonfunctional Requirements	5
5.1	Performance Requirements	5
5.2	Safety Requirements	5
5.3	Security Requirements	5
5.4	Software Quality Attributes	6
6.	Other Requirements	6
7.	System Requirements Chart	6
Appendix A: Analysis Models	6
Appendix B: To Be Determined List	6


Revision History
Name	Date	Reason For Changes	Version
Person’s Name, not “Company X”. Multiple people are okay if they all worked on this version			
			


 
1.	Introduction
1.1	Purpose 
To Identify the product in which will be used for this project is Visual Studio 2015 version and a form of database together, to better accomplish the project in the best way for what the design is intended to perform within the project. To best Describe the purpose of this program is to provide a faster more subject focused way for students to be able to schedule a time with an academic coach for specific subject. This can also allow students to better manage their time for homework. 
This will also provide staff to schedule hours for the lab more accurately. The software being used to design the project is the language C# and a form a Database Development to hold the records and information for the students and academic coaches.
1.2	References
None
2.	Overall Description
2.1	User Classes and Characteristics
Student :
Students can add current classes and further drill down the filters to find an appropriate tutor for the level of the class. Technical expertise for this user will be minimal since they will be the heaviest users of the program and will be the driving force behind the product. Students security level will be minimal and will be locked down the most

Tutor:
Tutors will have similar security and expertise level needed as students.  The will be able to add their certifications and rank their abilities from strongest to weakest. Requirements of these users are experience and/or educational background. These users will also be “verified” users once they pass their background check.

Administrator
Administrators are involved with their overall management of the systems and payments. They will be hired by the company to oversee everything while working with Student and Teacher users to address issues that arise

2.2	Operating Environment
Windows 7 or higher with 1GHz Intel or AMD processor and 512MB of RAM
2.3	Design and Implementation Constraints
Valid internet connection necessary to use the software. Without constant internet connection, the database will be cached on device and may not be up to date for the user.

Database will not have data from any other schools. It’s only limited for Northeast Wisconsin Technical College
2.4	Assumptions and Dependencies
Software is intended to be used on a Windows Based machine. It could possibly be used in the future on mobile products but may not operate correctly.

Future implementation of ads and marketing may be added to supplement ongoing project funding.

3.	External Interface Requirements
3.1	User Interfaces
<Describe the logical characteristics of each interface between the software product and the users. This may include sample screen images, any GUI standards or product family style guides that are to be followed, screen layout constraints, standard buttons and functions (e.g., help) that will appear on every screen, keyboard shortcuts, error message display standards, and so on. Define the software components for which a user interface is needed. Details of the user interface design should be documented in a separate user interface specification.>

Think about this in terms of standards, not specific features. For example,
-	all buttons will have a black border
-	all fonts will be Arial
-	Draw a screen template showing “main area”, “menu here”, “status bar” and describe each component. If you have multiple screen layouts depending on the user’s current task/settings, describe them
-	What screen resolutions will you support?
-	Will you be Section 508 compliant? Are there any other standards you support?
-	etc…
3.2	Hardware Interfaces
<Describe the logical and physical characteristics of each interface between the software product and the hardware components of the system. This may include the supported device types, the nature of the data and control interactions between the software and the hardware, and communication protocols to be used.>

If you system doesn’t include hardware, then you’ll have none. If it has hardware components, then you should describe (at a high level) how you interface with that hardware.
3.3	Software Interfaces
<Describe the connections between this product and other specific software components (name and version), including databases, operating systems, tools, libraries, and integrated commercial components. Identify the data items or messages coming into the system and going out and describe the purpose of each. Describe the services needed and the nature of communications. Refer to documents that describe detailed application programming interface protocols. Identify data that will be shared across software components. If the data sharing mechanism must be implemented in a specific way (for example, use of a global data area in a multitasking operating system), specify this as an implementation constraint.>

These are internal connections to things like databases, web servers. You mainly need to explain that you have them, but I don’t expect detailed information about how you actually connect to them and use them. Just explain that you do connect to them and use them for storage of customer information, or to process incoming web requests, etc… These are internal components of your system.
3.4	Communications Interfaces
<Describe the requirements associated with any communications functions required by this product, including e-mail, web browser, network server communications protocols, electronic forms, and so on. Define any pertinent message formatting. Identify any communication standards that will be used, such as FTP or HTTP. Specify any communication security or encryption issues, data transfer rates, and synchronization mechanisms.>

These are external communication mechanisms. Do you connect to a bank computer to verify credit card information? That is NOT part of your system, so it is an external communication you have. Describe it here. Do you have other systems connecting in to yours to perform some function? That would also go here.
4.	System Use Cases
The overall use case diagram should be here.

The text description of each use case should follow.

4.1	(examples)Use case name and identifier
1.	Unique Identifier
2.	Objective - What is the ultimate objective of the use-case. What is it trying to achieve? What was the source of the use-case requirement? 
3.	Priority – The overall priority of this use-case (Low, Medium, High)
4.	Source – Who is the main source of this use case. Who cares most about this functionality? This should be the one person you would ask if there is a question about this use-case. (Make up a name and cite their: John Smith (End-user) here.)
5.	Actors - Who is involved in the use-case? Which actors/stakeholders?
6.	Flow of Events   
6.1.	Basic Flow - flow of events normally executed in the use-case 
6.2.	Alternative Flow(s) - a secondary flow of events due to infrequent conditions
6.3.	Exception Flow(s) - Exceptions that may happen during the execution of the  use case
7.	Includes - other use case IDs that are referenced in steps in the flow of events.
8.	Preconditions - Any condition that must be satisfied before the use case begins. If the condition is “User is logged in”, then the first step of the use case is NOT “User logs in”. They are already logged in if that is a pre-condition!
9.	Post conditions - The conditions that will be satisfied after the use case successfully completes
10.	Notes/Issues - Any relevant notes or issues that need to be resolved

4.2Making Schedule with a Tutor(U5)
1.	U5
2.	Objective – The student is making schedule to see his/her tutor by using the software. He/she will check for the appropriate time to choose and the system will save his/her schedule and send a notification message to the tutor’s email.
3.	Priority – Low
4.	Source – Mr. A (Student Supported Center)
5.	Actors – Students, System
6.	Flow of Events   
6.1.	Basic Flow 
6.1.1.	Student logs into the system
6.1.2.	Student clicks to make schedule
6.1.3.	System Checks for the available date & time
6.1.4.	Student selects the appropriate date/time to make schedule
6.1.5.	Student writes a message/text for his/her purpose to see the tutor
6.1.6.	Student submits his/her schedule
6.1.7.	System blocks off the date and time so it will not get double booked
6.1.8.	System  sends confirmation email to student and tutor
6.2.	Alternative Flow 1 – At step 6.1.6 Student did not choose time
6.2.1.	Error message displayed for student to choose proper time
6.2.2.	Return to step 6.1.4
6.3.	Alternative Flow 2 – At any step the user presses “cancel”
6.3.1.	System returns to the main menu
6.4.	Alternative Flow 3 - At step 6.1.7 System encounters failure
6.4.1.	An error message is shown to the student
6.4.2.	Return to step 6.2
6.5.	Exception Flow 1 – 
6.5.1.	Database is locked due to backup in progress. 
7.	Includes 
7.1.	none
8.	Preconditions – Student is logged in
9.	Post conditions – the successful message is displayed to the student and the schedule is made
10.	Notes/Issues - None


5.	Other Nonfunctional Requirements
5.1	Performance Requirements
<If there are performance requirements for the product under various circumstances, state them here and explain their rationale, to help the developers understand the intent and make suitable design choices. Specify the timing relationships for real time systems. Make such requirements as specific as possible. You may need to state performance requirements for individual functional requirements or features.>

In this section, just say “See section 7 requirements 23-27”. And I’ll assume those requirements are Performance related.

5.2	Safety Requirements
<Specify those requirements that are concerned with possible loss, damage, or harm that could result from the use of the product. Define any safeguards or actions that must be taken, as well as actions that must be prevented. Refer to any external policies or regulations that state safety issues that affect the product’s design or use. Define any safety certifications that must be satisfied.>

In this section, just say “See section 7 requirements 25-32”. And I’ll assume those requirements are Safety related.

5.3	Security Requirements
<Specify any requirements regarding security or privacy issues surrounding use of the product or protection of the data used or created by the product. Define any user identity authentication requirements. Refer to any external policies or regulations containing security issues that affect the product. Define any security or privacy certifications that must be satisfied.>

In this section, just say “See section 7 requirements 35-42”. And I’ll assume those requirements are Security related.

5.4	Software Quality Attributes
<Specify any additional quality characteristics for the product that will be important to either the customers or the developers. Some to consider are: adaptability, availability, correctness, flexibility, interoperability, maintainability, portability, reliability, reusability, robustness, testability, and usability. Write these to be specific, quantitative, and verifiable when possible. At the least, clarify the relative preferences for various attributes, such as ease of use over ease of learning.>

In this section, just say “See section 7 requirements 55-62”. And I’ll assume those requirements are Software Quality related.
6.	Other Requirements
<Define any other requirements not covered elsewhere in the SRS. This might include database requirements, internationalization requirements, legal requirements, reuse objectives for the project, and so on. Add any new sections that are pertinent to the project.>

You may not have any.
7.	System Requirements Chart
< Include a table in this section with the following columns:

ID – Unique requirement ID
Priority – Priority of this requirement
Type – Functional(F) or Non-functional(NF)
Source – Who is most interested in this requirement (John Smith – Customer). For this project you can make it up, in reality you’ll want to capture this as you capture the requirements.
Contained in Use Case(s) – Which use cases reference this requirement or which use cases when executed will perform this requirement. There may be a few functional requirements without a use-case and the non-functional requirements generally will NOT be part of a use-case (so put N/A).
Description – The description of the requirement. “The system shall …. “
>

These requirements should match up with your use case diagrams.
Appendix A: Analysis Models
<Optionally, include any pertinent analysis models, such as data flow diagrams, class diagrams, state-transition diagrams, or entity-relationship diagrams.>

Don’t do any of these for CS421 SRS. You will create these models during the high level design deliverable.
Appendix B: To Be Determined List
<Collect a numbered list of the TBD (to be determined) references that remain in the SRS so they can be tracked to closure.>

List here any open questions or things you know still need to be done to the SRS, but haven’t been addressed yet. (It’s okay to have things like that, especially in this project because we don’t have time to do everything.)
